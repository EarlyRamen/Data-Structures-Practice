Back Substitution for Factorial Function
    1. T(n) = 1 + T(n-1)
    2. T(n-1) = 1 + T(n-2)
    3. T(n-2) = 1 + T(n-3)
    4. T(n) = 1 + 1 + T(n-2)
    5. T(n) = 1 + 1 + 1 + T(n-3)

    k. k+T(n-k)
       n-k=0
       n=k
    
    T(n) = n + T(n-n)
    T(n) = n + O(1)
    O(n)


Ex2:
int count2n(int n){
    if n==0 return 0;
    return n+count2n(n-1);
}

    1. T(n)=1+T(n-1)
    2. T(n-1)=1+T(n-2)
    3. T(n-3)=1+T(n-3)
    4. T(n)=1+1+1+T(n-3)
    5. T(n)=3+T(n-3)
    6. T(n)=k+T(n-k)

    n-k=0
    n=k

    T(n)=n+T(n-n)
    T(n)=n+O(1)
    O(n)


Binary Search
    1. T(n)=1+T(n/2)
    2. T(n/2)=1+T(n/4)
    4. T(n/4)=1+T(n/8)

    T(n)=1+1+1+T(n/8)
    T(n)=3+T(n/8)

    T(n)=k+T(n/(2^k)) 
    n/(2^k)=1
    n=2^k
    log2 n=k

    T(n)=log(n) + O(1)
    O(log2 n)

Fib Numbers
    f(n-1)+f(n-2) < f(n-1)+f(n-1)

    1. T(n)=1+2T(n-1)
    2. T(n-1)=1+2T(n-2)
    2. T(n-2)=1+2T(n-3)

    T(n)=1+1+1+2(2(2T(n-3)))
    T(n)=3+(2^3)T(n-3)
    T(n)=k+(2^k)T(n-k)

    n-k=0
    n=k

    T(n)=n+(2^n)*O(1)
    O(2^n)

Merge Sort
    O(nlogn)